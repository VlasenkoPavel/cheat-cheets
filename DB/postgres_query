UPDATE activity SET start=subquery.start
FROM (
    SELECT activity.id as id, stage."beginDate" as start
    FROM  activity
    JOIN stage ON stage."activityId" = activity.id
    AND stage."type" = 'Preparation'
) AS subquery
WHERE activity.id=subquery.id;

//////////////////////////////////////////////////////////////

            CREATE TABLE task_reading (
                task_id INTEGER NOT NULL REFERENCES task(id),
                user_id INTEGER NOT NULL REFERENCES "user"(id),
                reading_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
            );

            ALTER TABLE task_reading ADD CONSTRAINT "task_reading_pkey" PRIMARY KEY (task_id, user_id);

            CREATE OR REPLACE FUNCTION move_comment_reading_data() RETURNS VOID AS $$
            DECLARE
                reading RECORD;
            BEGIN
                FOR reading IN
                    SELECT "taskId", "userId", "lastReadingDate" FROM date_comment_reading
                        WHERE
                        EXISTS (
                            SELECT * from "user" WHERE id=date_comment_reading."userId"
                        )
                        AND EXISTS (
                            SELECT * from task WHERE id=date_comment_reading."taskId"
                        )
                LOOP
                    INSERT INTO task_reading (task_id, user_id, reading_time)
                    VALUES(reading."taskId", reading."userId", reading."lastReadingDate")
                    ON CONFLICT (task_id, user_id) DO NOTHING;
                END LOOP;
            END;
            $$ LANGUAGE plpgsql;

            SELECT move_comment_reading_data();

            DROP TABLE date_comment_reading;
/////////////////////////////////////////////////////////////////////////////////


            CREATE MATERIALIZED VIEW activity_view (
                id,
                name,
                author_id,
                responsible_id,
                status,
                create_time,
                update_time,
                technical_status,
                start_date,
                end_date,
                realization_start_date,
                realization_end_date,
                type_id,
                division_id,
                product_id,
                organization_id,
                product_name,
                product_image_path,
                favorite_by_users,
                participant_ids,
                work_type_ids
            ) AS SELECT
                activity.id,
                activity.name,
                activity."authorId",
                activity."responsibleId",
                activity."status",
                activity."createTime",
                activity."updateTime",
                activity.technical_status,
                activity.start_date,
                activity.end_date,
                activity.realization_start_date,
                activity.realization_end_date,
                activity."typeId",
                activity."divisionId",
                activity."productId",
                product."organizationId",
                product.name,
                product."imagePath",
                favorite_by.user_ids,
                participant.user_ids,
                work_type.work_type_ids
            FROM activity
                LEFT JOIN product ON activity."productId"=product.id
                LEFT JOIN (
                    SELECT "activityId" as activity_id,  array_agg("userId"::INTEGER) as user_ids
                    FROM user_favorite_activity GROUP BY "activityId"
                ) as favorite_by ON activity.id = favorite_by.activity_id
                LEFT JOIN (
                    SELECT activity_id,  array_agg(user_id::INTEGER) as user_ids
                    FROM activity_participant GROUP BY activity_id
                ) as participant ON activity.id = participant.activity_id
                LEFT JOIN (
                    SELECT activity_id,  array_agg(work_type_id::VARCHAR) as work_type_ids
                    FROM activity_work_type GROUP BY activity_id
                ) as work_type ON activity.id = work_type.activity_id;

/////////////////////////////////////////////////
            CREATE EXTENSION "uuid-ossp";
            ALTER TABLE ACTIVITY ALTER COLUMN uuid SET DEFAULT uuid_generate_v4();
/////////////////////////////////////////////////


**** cast jsonb array to uuid array
CREATE TABLE order_referral_uuid
    AS select order_id,
    array_agg(jsonb_array_elements_text)::UUID[] as referral_ids
    FROM (SELECT order_id, jsonb_array_elements_text(referral_ids) from orders) referral_ids GROUP BY order_id;

SELECT unnest(
    ARRAY(SELECT trim(value::text, '"') FROM jsonb_array_elements_text(body->'coAuthorIds'))::uuid[]
) AS "coAuthorId", entity_id
FROM "event_store"

**** jsonb array item query
SELECT from rendered_service_view where value->'plans' @> '[{"id":"c1e8a235-de8b-44c3-bac5-4828390b2851"}]';

**** update jsonb array item
https://www.freecodecamp.org/news/how-to-update-objects-inside-jsonb-arrays-with-postgresql-5c4e03be256a/
https://stackoverflow.com/questions/38996212/using-jsonb-set-for-updating-specific-jsonb-array-value

select
    pos- 1 as elem_index
from
    samples,
    jsonb_array_elements(sample->'result') with ordinality arr(elem, pos)
where
    id = 26 and
    elem->>'8410' = 'FERR_R';

update
    samples
set
    sample =
        jsonb_set(
            sample,
            array['result', elem_index::text, 'ratingtext'],
            '"some individual text"'::jsonb,
            true)
from (
    select
        pos- 1 as elem_index
    from
        samples,
        jsonb_array_elements(sample->'result') with ordinality arr(elem, pos)
    where
        id = 26 and
        elem->>'8410' = 'FERR_R'
    ) sub
where
    id = 26;
******

ALTER TABLE orders ADD COLUMN referral_uuids UUID[];

UPDATE orders SET referral_uuids = order_referral_uuid.referral_ids from order_referral_uuid where orders.order_id = order_referral_uuid.order_id;
ALTER TABLE orders DROP COLUMN referral_ids;
ALTER TABLE orders RENAME COLUMN referral_uuids TO referral_ids;
ALTER TABLE orders ALTER COLUMN referral_ids SET NOT NULL;

DROP TABLE order_referral_uuid;

**** sequence
SELECT c.relname FROM pg_class c WHERE c.relkind = 'S'; // show all sequence

**** format
format('select max(%I) from %I where %I = $1.%I', TG_ARGV[1], TG_TABLE_NAME, TG_ARGV[0], TG_ARGV[0]);
format('SELECT $1.%I::TEXT', TG_ARGV[0]) INTO seqName USING NEW;
format('CREATE SEQUENCE IF NOT EXISTS %I', seqName);
format('SELECT nextval(%L)', seqName) INTO verStep USING NEW;

You can just forget about the format() function like so:

_nom_personne_like := 'TEST%';
_type_activite_personne := 'SOMETHING';
IF _nom_personne_like != '' THEN
    _query := _query || ' AND personne_planning.nom_personne LIKE ' ||
              quote_literal(_nom_personne_like);
END IF;
IF _type_activite_personne != '' THEN
    _query := _query || ' AND personne_planning.type_activite = ' ||
              quote_literal(_type_activite_personne);
END IF;
