
5d58cde7b69417df2fedbf954342f3f797eb674b
GIST ID: 7cbf2d67ddb6b8c56ce49bef828fcaaa.

Open Settings (JSON) // in find line in settings
'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback' //default font
zen mode

https://code.visualstudio.com/docs/languages/javascript
https://code.visualstudio.com/docs/languages/javascript#_intellisense
https://github.com/Microsoft/vscode/issues/760  //"editor.renderLineHighlight": "none", or "editor.renderLineHighlight": "gutter"
https://www.growingwiththeweb.com/2017/03/mastering-vscodes-terminal.html //terminl
https://sergeyvasin.net/2017/10/10/some-vscode-settings/  //code exec
https://code.visualstudio.com/docs/getstarted/theme-color-reference  //theme colors
https://stackoverflow.com/questions/47040925/microsoft-vs-code-jump-10-lines-vertically-at-once //10 lines
https://github.com/Microsoft/vscode/issues/16363 // "window.titleBarStyle": "custom"
https://code.visualstudio.com/docs/editor/variables-reference  // variables Reference

https://code.visualstudio.com/updates/v1_47 // releases

//vscode-api-commands
https://code.visualstudio.com/docs/extensionAPI/vscode-api-commands

///extensions
markdownlint
@recommended

ctr + m //tab focus off/on

/group/.*/role   // поиск с произвольным символов
. - один произвольный символом
.* - любое колличество

f1 - open inner comand line

f2 - замена переменной везде
cntrl+f2 выделит все вхождения

Ctrl+I	Select current line (ctrl + l ???)
Ctrl+shift+K	Delete current line

f12 - открыть выделенный
ctr + f12 реализация выделенного класса/интерфейса
shif +f12 //показать где используется метод
Ctrl+Shift+F10 - Bring up a Peek window that shows the definition of a symbol.
ctr  //при выделенном чем-нибудь показывает подробно описание сигнатур
ctr + t // list of simbols, search symbol
ctr+G //go to line
ctr+e //resently closed
ctr + alt + s // search editor


ctr + ~  //open terminal
ctr + shift + ~  //open new terminal instance
workbench.action.terminal.focusNext

file/preferences/keyboard shortcuts
file/preferences/user snipets/typescript.json  //сочетания + tab
Ctrl+Shift+M    //display the PROBLEMS panel with a list of all current errors.
set Go to type defeniton

ctr+alt+c //copy file path
ctr+b //open close sidemenu
сtr+d //выделить вхождение выделенного
ctr+tab //открытые файлы
ctr+tab //next editor (next tab)
ctr+t //список всех symbols
ctr+shift+o //список symbols открытого файла
rigtclic -> select for compare

Ctrl+U	Undo last cursor operation
Ctrl+]	Indent Line
Ctrl+[	Outdent Line
Ctrl+Shift+[	Fold (collapse) region	editor.fold
Ctrl+Shift+]	Unfold (uncollapse) region
Ctrl+K Ctrl+0	Fold (collapse) all subregions	editor.foldRecursively
Ctrl+K Ctrl+j	Unfold (uncollapse) all subregions
Ctrl+Shift+O	Go to Symbol        !!!!!!!!!!

Ctrl+Shift+M  //to display the PROBLEMS panel with a list of all current errors
f8, shift f8 - вперед назад по ошибкам

files include *  в поиске //искать везде

ctr+p //поиск файла
? в строке показывает спецсимволы

find по файлам /рядоом стрелка окрывающая rename

/**   //add comment

f1 then show release notes

https://code.visualstudio.com/docs/editor/editingevolved  //navigation
f8 - перебор ошибок
ctr + , //открыть конфиг

alt + shift + right arrow - expand selection

plagins
Prettier - Code formatter
https://scottsauber.com/2017/06/10/prettier-format-on-save-never-worry-about-formatting-javascript-again/    //pretier
sftp
Git Blame

config
{
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": false,
    "editor.minimap.enabled": true,
    "files.insertFinalNewline": true,
    "files.trimTrailingWhitespace": true,
    "csscomb.formatOnSave": true,
    "csscomb.preset": "yandex",
    "editor.rulers": [
        120
    ],
    "window.zoomLevel": 0,
    "editor.snippetSuggestions": "top",
    "workbench.panel.location": "bottom",
    "javascript.implicitProjectConfig.experimentalDecorators": true,
    "remote.port": 52698,
    "remote.host": "127.0.0.1",
    "prettier.requireConfig": true,
    "editor.formatOnSave": true
}

**************** debugger ****************************
https://code.visualstudio.com/docs/editor/debugging

f9 // add/remove breakpoint
shift+f9 //inline breakpoint
ctr+spaace //Launch.json  see the list of available attributes
add configuration // right botom coner, add "configurations"
multiline in REPL Shift+Enter

{
	"version": "0.2.0",
	"configurations": [
		{
			"name": "Launch",
			"type": "node",
			"request": "launch",
			"program": "node_modules/nightwatch/bin/runner.js",
			"stopOnEntry": false,
			"args": [
			"--test buildOutput/JavaScript1.js --env devtest-chrome-win8"
			],
			"cwd": ".",
			"runtimeExecutable": null,
			"runtimeArgs": [
					"--nolazy"
				],
				"env": {
					"NODE_ENV": "development"
				},
				"externalConsole": true,
				"sourceMaps": false,
				"outDir": null
		},
		{
			"name": "Attach",
			"type": "node",
			"request": "attach",
			"port": 5858
		}
	]
}


**************** SNIPPETS ****************************
{
	/*
		// Place your snippets for TypeScript    "workbench.colorCustomizations" : {
        "editor.background":"#000",
        "sideBar.background": "#141414",
        "editorGroupHeader.tabsBackground": "#1b1919",
        "activityBar.background": "#0000"
    } here. Each snippet is defined under a snippet name and has a prefix, body and
		// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
		// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
		// same ids are connected.
		// Example:
		"Print to console": {
			"prefix": "log",
			"body": [
				"console.log('$1');",
				"$2"
			],
			"description": "Log output to console"
		}
	*/

	"Print to console": {
		"prefix": "dir",
		"body": [
			"console.log('$1=');console.dir($1, {colors: true, depth:$2 3}); //test",
			"$2"
		],
		"description": "Log output to console 2"
	},

	"Print jest describe": {
		"prefix": "desc",
		"body": [
			"describe('$1', () => {",
			"    it('$2', () => {",
			"        $3",
			"    });",
			"});",
		],
		"description": "Log output to console 2"
	},

	"Print jest it": {
		"prefix": "it",
		"body": [
			"it('$1', () => {",
			"    $2",
			"});",
		],
		"description": "Log output to console 2"
	},

	"Print to console2": {
		"prefix": "bdir",
		"body": [
			"console.log('//////////////////////////////////////////////////////////////////////////////////////////');",
			"console.log('$1=');console.dir($1, {colors: true, depth:$2 3}); //test",
			"console.log('//////////////////////////////////////////////////////////////////////////////////////////');",
		],
		"description": "Log output to console 2"
	},

	"Print to console3": {
		"prefix": "blog",
		"body": [
			"console.log('//////////////////////////////////////////////////////////////////////////////////////////');",
			"console.log('$1=', $1); //test",
			"console.log('//////////////////////////////////////////////////////////////////////////////////////////');",
		],
		"description": "Log output to console 2"
	},

	"Print to console4": {
		"prefix": "pe",
		"body": [
			"process.exit();$1",
		],
		"description": "Log output to console 2"
	},

	"Get timing": {
		"prefix": "time",
		"body": [
			"const start = (new Date).getTime();",
        	"const end = (new Date).getTime();",
			"const time = (end - start)/1000;",
			"console.log('//////////////////////////////////////////////////////////////////////////////////////////')",
			"console.log('time=', time); //test",
			"console.log('//////////////////////////////////////////////////////////////////////////////////////////')",
		],
		"description": "get timing"
	},

	"Get import": {
		"prefix": "if",
		"body": [
			"import {  } from '$1';",
		],
		"description": "get import"
	},

	"Get arrow function": {
		"prefix": "af",
		"body": [
			"({ $1 }) => ",
		],
		"description": "get arrow function"
	},

	"Get arrow function whuth curl braces": {
		"prefix": "afc",
		"body": [
			"({ $1 }) => {};",
		],
		"description": "get arrow function whuth curl braces"
	},
}

//////////////////////////////
{
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": false,
    "editor.minimap.enabled": true,
    "files.insertFinalNewline": true,
    "files.trimTrailingWhitespace": true,
    "editor.rulers": [
        120
    ],
    "window.zoomLevel": -1,
    "editor.snippetSuggestions": "top",
    "javascript.implicitProjectConfig.experimentalDecorators": true,
    "editor.formatOnSave": false,
    "terminal.integrated.rendererType": "auto",
    "editor.renderLineHighlight": "none",
    "terminal.integrated.fontWeightBold": "normal",
    "terminal.integrated.cursorStyle": "line",
    "workbench.colorTheme": "Default High Contrast",
    "workbench.colorCustomizations" : {
        "focusBorder": "#2d5c58",
        "sideBar.border": "#448882",
        "contrastBorder": "#59595b",
        "tab.activeBackground": "#2d5c58",
        "editor.selectionBackground": "#76acb8",
        "editorError.border": "#001aff",
        "inputValidation.errorBorder": "#ff0000"
    }
}
////////////////////////////////
{
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": false,
    "editor.minimap.enabled": true,
    "files.insertFinalNewline": true,
    "files.trimTrailingWhitespace": true,
    "editor.rulers": [
        120
    ],
    "window.zoomLevel": -1,
    "editor.snippetSuggestions": "top",
    "javascript.implicitProjectConfig.experimentalDecorators": true,
    "editor.formatOnSave": false,
    "terminal.integrated.rendererType": "auto",
    "editor.renderLineHighlight": "none",
    "terminal.integrated.fontWeightBold": "normal",
    "terminal.integrated.cursorStyle": "line",
    "prettier.requireConfig": true,
    "prettier.printWidth": 120,
    "prettier.singleQuote": true,
    "prettier.tabWidth": 4,
    "workbench.colorCustomizations" : {
        "editor.background":"#000",
        "sideBar.background": "#141414",
        "editorGroupHeader.tabsBackground": "#1b1919",
        "activityBar.background": "#0000"
    }
}

//// keybindings.json link in user sortcuts (top)
{
    "key": "alt+f9",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
},
{
    "key": "alt+f9",
    "command": "workbench.action.terminal.focus",
    "when": "!terminalFocus"
},
{
	"key": "ctrl+shift+up",
	"command": "cursorMove",
	"args": {
		"to": "up",
		"by": "line",
		"value": 10
	},
	"when": "editorTextFocus"
},
{
	"key": "ctrl+shift+down",
	"command": "cursorMove",
	"args": {
		"to": "down",
		"by": "line",
		"value": 10
	},
	"when": "editorTextFocus"
}

//////////////////////////////////
sftp config

{
    "host": "www15.lan",
    "port": 22,
    "username": "gorod",
    "password": "123qwe",
    "protocol": "sftp",
    "agent": null,
    "privateKeyPath": null,
    "passphrase": null,
    "passive": false,
    "interactiveAuth": true,
    "remotePath": "/home/gorod/sber-marketing",
    "uploadOnSave": true,
    "syncMode": "update",
    "watcher": {
        "files": false,
        "autoUpload": true,
        "autoDelete": true
    },
    "ignore": [
        "**/.vscode/**",
        "**/.git/**",
        "**/.DS_Store",
        "**/node_modules/**",
        "**/dist/**"
    ]
}
//////////////////////////////////

gitLens///////////////////
code Lens enable



////debugger
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch ehr",
            "args": ["${relativeFile}"],
            "env": {
                "SM_ENV": "test"
            },
            "console": "integratedTerminal"
        },
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Script",
            "program": "${workspaceFolder}/${relativeFile}",
            "env": {
                "SM_ENV": "test"
            },
            "console": "integratedTerminal"
        },
        {
            "type": "node",
            "request": "launch",
            "name": "run test",
            "program": "${workspaceFolder}/node_modules/.bin/jest",
            "cwd": "${workspaceFolder}/backend/cms/",
            "runtimeExecutable": "node",
            "args": ["${relativeFile}"],
            "env": {
                "CMS_ENV": "mock"
            },
            "console": "integratedTerminal"
        },
        {
            "type": "node",
            "request": "launch",
            "name": "run simple infrastructure test",
            "program": "${workspaceFolder}/node_modules/.bin/jest",
            "cwd": "${workspaceFolder}/backend/cms/",
            "args": ["-i", "--testPathPattern", "dist/core/test/intergrationTests.spec.js", "${fileBasenameNoExtension}"],
            "env": {
                "CMS_ENV": "test",
            },
            "console": "integratedTerminal"
        }
    ]
}


//////////////Bracket Pair Colorizer settings.json
    "bracketPairColorizer.consecutivePairColors": [
        "()",
        "{}",
        [
            "LightSkyBlue",
            "LightGrey",
            "Navajowhite"
        ],
        "Red"
    ],

/////////////////////////////////////////
Open new terminals with custom working directories
There is a new command that allows the creation of terminals with a custom current working directory (cwd):

{
  "key": "cmd+shift+h",
  "command": "workbench.action.terminal.newWithCwd",
  "args": {
    "cwd": "${fileDirname}"
  }
}

/////////
Disable GPU acceleration
We have heard issue reports from users that seem related to how the GPU is used to render VS Code's UI. These users have a much better experience when running VS Code with the additional --disable-gpu command-line argument. Running with this argument will disable the GPU hardware acceleration and fall back to a software renderer.

To make life easier, you can add this flag as a setting so that it does not have to be passed on the command line each time.

To add this flag:

Open the Command Palette (Ctrl+Shift+P).
Run the Preferences: Configure Runtime Arguments command.
This command will open a argv.json file to configure runtime arguments. You might see some default arguments there already.
Add "disable-hardware-acceleration": true.
Restart VS Code.
Note: Do not use this setting unless you are seeing issues!
///////////////

**** sftp
{
    "host": "78.155.197.132",
    "port": 22,
    "username": "chaikadev",
    "privateKeyPath": "/home/psvl/.ssh/id_rsa",
    "passphrase": "my passphrase",
    "protocol": "sftp",
    "agent": null,
    "passive": false,
    "interactiveAuth": true,
    "remotePath": "/home/chaikadev/queries",
    "uploadOnSave": true,
    "syncMode": "update",
    "watcher": {
        "files": false,
        "autoUpload": true,
        "autoDelete": true
    },
    "ignore": [
        "**/.vscode/**",
        "**/.git/**",
        "**/.DS_Store",
        "**/node_modules/**",
        "**/dist/**"
    ]
}
