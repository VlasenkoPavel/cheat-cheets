https://console.developers.google.com/  // admin console
https://console.cloud.google.com/home/dashboard?authuser=1&project=chaika-cms-281415&supportedpurview=project // google cloud

https://cloud.google.com/iam/docs/overview  // base concepts
https://cloud.google.com/docs/authentication/getting-started // Getting Started with Authentication


https://developers.google.com/identity/protocols/oauth2 // about authorization
https://developers.google.com/identity/protocols/oauth2/web-server // authorization for web server

https://support.google.com/googleapi/answer/6158862?hl=en&ref_topic=7013279  // create project, api key, clint id, secret
https://support.google.com/googleapi/answer/6158862?hl=en&ref_topic=7013279
https://developers.google.com/identity/protocols/oauth2/web-server#incrementalAuth

https://developers.google.com/admin-sdk/directory/v1/guides/prerequisites // directory api enabling


https://cloud.google.com/iam/docs/service-accounts
https://developers.google.com/identity/protocols/oauth2/service-account#delegatingauthority // service account authorization, Manage Domain Wide Delegation
https://stackoverflow.com/questions/25530184/how-do-i-change-a-users-password-using-googles-directory-api-using-java // java examples


Gsuite admin console -> Security -> API Controls (API PERMISSIONS) -> Domain-wide Delegation
https://developers.google.com/identity/protocols/oauth2/scopes // scopes


import { google } from 'googleapis';

const scopes = ['https://www.googleapis.com/auth/admin.directory.user'];

async function main () {
    const auth = new google.auth.GoogleAuth({
        clientOptions: { subject: 'p.slotinsky@chaika.com', scopes },
        scopes,
    });

    const service = google.admin({ version: 'directory_v1', auth });

    // await service.users.insert({ requestBody: {
    //     name: {
    //         familyName: 'testFamilyName',
    //         fullName: 'testFamilyName testPatron testName',
    //         givenName: 'testName',
    //     },
    //     password: '123qwe_123qwe',
    //     primaryEmail: 'testName@chaika.com'
    // }});

    // await service.users.delete({ userKey: 'testName@chaika.com' });

    const resp = await service.users.list({
        customer: 'my_customer',
        maxResults: 100,
        orderBy: 'email',
    })

    console.log('response:', resp.data.users);
}

main().catch(console.error);

import { JWT } from 'google-auth-library';

const scopes = ['https://www.googleapis.com/auth/admin.directory.user'];

async function main () {
    const keyFile = process.env.GOOGLE_APPLICATION_CREDENTIALS;
    const keys = require(keyFile as string);

    const client = new JWT({
        subject: 'p.slotinsky@chaika.com',
        email: keys.client_email,
        key: keys.private_key,
        scopes,
    });

    const url = `https://www.googleapis.com/admin/directory/v1/users?domain=chaika.com`;
    const res = await client.request({ url });
    console.log(res.data);
}

main().catch(console.error);


**********************

#!/usr/bin/env node
import fs from 'fs';
import { google } from 'googleapis';
import http from 'http';
import { GSuiteAuthConfig } from 'chaika-config';
import { ICommand } from 'chaika-app-components';
import { execute } from '@core/execute';
import { first, last } from 'lodash';
import { waitResult } from 'chaika-utils';
import { OAuth2Client } from 'google-auth-library';

interface Deps {
    gsuiteAuthConfig: GSuiteAuthConfig;
}

interface Credentials {
    client_id: string;
    project_id: string;
    token_uri: string;
    client_secret: string;
    redirect_uris: string[];
}

class TokenGettingCommand implements ICommand {

    private config: GSuiteAuthConfig;
    private credentials!: Credentials;
    private code?: string;
    private authClient!: OAuth2Client;

    constructor({ gsuiteAuthConfig }: Deps) {
        this.config = gsuiteAuthConfig;
    }

    async execute(): Promise<void> {
        console.log(this.config);
        await this.init();
        await this.getToken();
        await this.getUserList();
    }


    private async getUserList() {
        console.log('this.authClient:', this.authClient)
        const service = google.admin({
            version: 'directory_v1',
            auth: this.authClient
        });

        const resp = await service.users.list({
            customer: 'my_customer',
            maxResults: 100,
            orderBy: 'email',
        });

        // await service.users.insert({ requestBody: {
        //     name: {
        //         familyName: 'testFamilyName',
        //         fullName: 'testFamilyName testPatron testName',
        //         givenName: 'testName',
        //     },
        //     password: '123qwe_123qwe',
        //     primaryEmail: 'testName@chaika.com'
        // }});

        console.log('userList:', resp.data.users?.map(it => it.primaryEmail))
    }

    private async init(): Promise<void> {
        this.credentials = (await this.parseCredentials()).web;
        await this.listenRedirectedRequest();
        const { client_secret, client_id, redirect_uris} = this.credentials;
        this.authClient = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);
    }

    private async parseCredentials(): Promise<{ web: Credentials }> {
        return new Promise((resolve, reject) => {
            fs.readFile(this.config.credentials, (err: any, content: any) => {
                if (err) {
                    reject(err);
                };
                resolve(JSON.parse(content))
            });
        })
    }

    private listenRedirectedRequest() {
        const server = http.createServer((req, res) => {
            const codeHeaderPref = `${first(this.credentials.redirect_uris)}/?code=`;
            this.code = req.rawHeaders.find(it => it.startsWith(codeHeaderPref))?.replace(codeHeaderPref, '');
            res.end(); //end the response
            server.close();
            if (this.code) {
                server.close();
            }
        }).listen(getPort(this.credentials));
    }

    private async getToken() {
        console.log('Authorize this app by visiting this url:', this.gerAuthUrl());
        await waitResult(() => this.code, { maxCount: 120 });

        return new Promise((resolve, reject) => {
            this.authClient.getToken(this.code!, (err: any, token: any) => {
                if (err) {
                    console.error('Error retrieving access token', err);
                    return reject(err);
                }

                this.authClient.credentials = token;
                this.storeToken(token);
                return resolve();
            })
        })

    }

    private gerAuthUrl(): string {
        return this.authClient.generateAuthUrl({ access_type: 'offline', scope: this.config.scopes });
    }

    private storeToken(token: any) {
        return new Promise((resolve, reject) => {
            fs.writeFile(this.config.token, JSON.stringify(token), (err: any) => {
                if (err) {
                    reject(err)
                }
                resolve();
            });
        })
    }
}

function getPort(credentials: Credentials): number {
    const uri = first(credentials.redirect_uris)!;
    return Number(last(uri.split(':'))!);
}

execute(TokenGettingCommand);
